// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

const lightCodeTheme = require('prism-react-renderer/themes/github');
const darkCodeTheme = require('prism-react-renderer/themes/dracula');

/** @type {import('@docusaurus/types').Config} */
const config = {
  title: 'Dinodoc',
  tagline: ' Docusaurus-powered documentation system for Clojure',
  // favicon: 'img/favicon.ico',

  // Set the production url of your site here
  url: 'https://dinodoc.pages.dev',
  // Set the /<baseUrl>/ pathname under which your site is served
  // For GitHub pages deployment, it is often '/<projectName>/'
  baseUrl: '/',

  staticDirectories: [
    'static',
    '../examples/javadoc/static',
    '../examples/rust/static',
  ],

  // GitHub pages deployment config.
  // If you aren't using GitHub pages, you don't need these.
  // organizationName: 'facebook', // Usually your GitHub org/user name.
  // projectName: 'docusaurus', // Usually your repo name.

  // onBrokenLinks: 'throw',
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'warn',

  // Even if you don't use internalization, you can use this field to set useful
  // metadata like html lang. For example, if your site is Chinese, you may want
  // to replace "en" with "zh-Hans".
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },

  presets: [
    [
      'classic',
      /** @type {import('@docusaurus/preset-classic').Options} */
      ({
        docs: {
          routeBasePath: '/',
          sidebarPath: require.resolve('./sidebars.js'),
          // `editUrl` option is not needed as it will be set in metadata for each file

          // These overrides are needed for the openapi docs plugin to render properly
          docLayoutComponent: '@theme/DocPage',
          docItemComponent: '@theme/ApiItem',
        },
        theme: {
          customCss: [
            require.resolve('./src/css/custom.css'),
            // Extra css needed to show labels for HTTP methods in sidebar
            require.resolve('./src/css/docusaurus-openapi-docs.css'),
          ],
        },
      }),
    ],
  ],

  markdown: {
    mermaid: true,
  },

  themes: [
    '@docusaurus/theme-mermaid',
    'docusaurus-theme-openapi-docs',
  ],

  plugins: [
    // Example including documentation for TypeScript project
    [
      'docusaurus-plugin-typedoc', {
        entryPoints: ['../examples/ts/src/app.ts', '../examples/ts/src/greeter.ts'],
        out: 'examples/ts'
        // tsconfig: '../tsconfig.json',
      }
    ],
    // Example rendering OpenAPI HTTP documentation
    [
      'docusaurus-plugin-openapi-docs',
      {
        docsPluginId: 'classic',
        config: {
          petstore: {
            specPath: '../examples/openapi/petstore/src/main/resources/openapi.yaml',
            outputDir: 'docs/examples/openapi/petstore',
            sidebarOptions: {
              groupPathsBy: 'tag',
            },
          },
          museum: {
            specPath: '../examples/openapi/museum/openapi.yaml',
            outputDir: 'docs/examples/openapi/museum',
            sidebarOptions: {
              groupPathsBy: 'tag',
            },
          },
          reitit: {
            specPath: '../examples/openapi/reitit.json',
            outputDir: 'docs/examples/openapi/reitit',
            sidebarOptions: {
              groupPathsBy: 'tag',
            },
          },
        },
      },
    ],
  ],

  themeConfig:
    /** @type {import('@docusaurus/preset-classic').ThemeConfig} */
    ({
      // Replace with your project's social card
      // image: 'img/docusaurus-social-card.jpg',
      navbar: {
        title: 'Dinodoc',
        // logo: {
        //   alt: 'My Site Logo',
        //   src: 'img/logo.svg',
        // },
        items: [
          {
            type: 'docSidebar',
            sidebarId: 'docSidebar',
            position: 'left',
            label: 'Docs',
          },
          {
            label: 'Examples', position: 'left',
            // Nested items are displayed in a dropdown menu.
            items: [
              { to: '/examples/promesa/', label: 'Clojure API' },
              { to: '/examples/ts/', label: 'TypeScript API' },
              { to: '/examples/openapi/petstore/add-pet', label: 'HTTP API' },
              { to: '/examples/structurizr/big-bank-plc/', label: 'Architecture Docs' },
              { to: '/examples/contextmapper/', label: 'Domain Driven Design' },
              { to: '/examples/dbschema/chinook/', label: 'DB Schema' },
              { to: '/examples/statecharts/', label: 'Statechart Diagrams' },
              { to: '/docs/#examples', label: 'Other' },
            ]
          },
          {
            href: 'https://github.com/dundalek/dinodoc',
            label: 'GitHub',
            position: 'right',
          },
        ],
      },
      footer: {
        // style: 'dark',
        copyright: "Generated by <a href=\"https://github.com/dundalek/dinodoc\">Dinodoc<a/>",
      },
      prism: {
        theme: lightCodeTheme,
        darkTheme: darkCodeTheme,
        additionalLanguages: ['clojure'],
      },
    }),
};

module.exports = config;
